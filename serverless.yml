org: cmill3
app: icarus-trading-engine
service: icarus-trading-engine
configValidationMode: warn
frameworkVersion: '3'



provider:
  name: aws
  region: us-east-1
  runtime: python3.9
  stage: ${self:custom.stage}
  timeout: 900
  deploymentBucket: 
    name: "yqalerts-serverless-bucket"
  environment:
    API_KEY: 'A_vXSwpuQ4hyNRj_8Rlw1WwVDWGgHbjp'

custom:
  # defaultStage: ${self:custom.throwError('Stage is required. Please provide a stage using --stage.')}
  stage: ${opt:stage, 'dev'}
  stages:
    - dev
    - prod-val
    # - prod
  dev:
    tradingDataBucket: icarus-trading-data-dev
    tradingDataBucketINV: inv-alerts-trading-data-dev
    ordersTableINV: icarus-orders-table-inv-dev
    closedOrdersTableINV: icarus-closed-orders-table-inv-dev
    env: DEV
    tableList15min: "['icarus-closed-orders-table-inv-dev', 'icarus-orders-table-inv-dev']"
    tableListdaily: "['icarus-model-results-table-dev']"
    closedTablelist: "['icarus-closed-orders-table-inv-dev']"
  prod-val:
    tradingDataBucket: icarus-trading-data
    tradingDataBucketINV: inv-alerts-trading-data
    ordersTableINV: icarus-orders-table-inv
    closedOrdersTableINV: icarus-closed-orders-table-inv
    env: PROD_VAL
    tableList15min: "['icarus-closed-orders-table-inv', 'icarus-orders-table-inv']"
    tableListdaily: "['icarus-model-results-table']"
    closedTablelist: "['icarus-closed-orders-table-inv']"

  
  # prod:
  #   tableName: prodTable

plugins:
  - serverless-step-functions
  - serverless-ignore

functions:
  new-trades-portfolio-manager-paper:
    handler: new_trades_portfolio_manager.manage_portfolio_inv
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucket}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
    layers:
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: new-trades-portfolio-manager-${self:provider.stage}
  open-trades-portfolio-manage-paperCDBFP:
    handler: open_trades_portfolio_manager.manage_portfolio_inv
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucket}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      STRATEGY: "CDBFP"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: open-trades-portfolio-manager-CDBFP-${self:provider.stage}
  open-trades-portfolio-manage-paperCDBFC:
    handler: open_trades_portfolio_manager.manage_portfolio_inv
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucket}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      STRATEGY: "CDBFC"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: open-trades-portfolio-manager-CDBFC-${self:provider.stage}
  open-trades-portfolio-manage-paperCDBFP1D:
    handler: open_trades_portfolio_manager.manage_portfolio_inv
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucket}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      STRATEGY: "CDBFP_1D"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: open-trades-portfolio-manager-CDBFP1D-${self:provider.stage}
  open-trades-portfolio-manage-paperCDBFC1D:
    handler: open_trades_portfolio_manager.manage_portfolio_inv
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucket}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      STRATEGY: "CDBFC_1D"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: open-trades-portfolio-manager-CDBFC1D-${self:provider.stage}
  icarus-trade-builder-CDVOLBFC1D:
    handler: icarus_trade_builder.build_trade_inv
    environment:
      MODEL_RESULTS_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_STRATEGY: "CDBFC_1D"
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: icarus-trade-builder-CDVOLBFC1D-${self:provider.stage}
  icarus-trade-builder-CDVOLBFP1D:
    handler: icarus_trade_builder.build_trade_inv
    environment:
      MODEL_RESULTS_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_STRATEGY: "CDBFP_1D"
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: icarus-trade-builder-CDVOLBFP1D-${self:provider.stage}
  icarus-trade-builder-CDVOLBFP:
    handler: icarus_trade_builder.build_trade_inv
    environment:
      MODEL_RESULTS_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_STRATEGY: "CDBFP"
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: icarus-trade-builder-CDVOLBFP-${self:provider.stage}
  icarus-trade-builder-CDVOLBFC:
    handler: icarus_trade_builder.build_trade_inv
    environment:
      MODEL_RESULTS_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TRADING_STRATEGY: "CDBFC"
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: icarus-trade-builder-CDVOLBFC-${self:provider.stage}
  closed-orders-data-processor:
    handler: order_data_processor.run_closed_trades_data_process
    environment:
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: closed-orders-data-processor-${self:provider.stage}
  opened-orders-data-processor:
    handler: order_data_processor.run_opened_trades_data_process
    environment:
      TRADING_DATA_BUCKET: ${self:custom.${self:provider.stage}.tradingDataBucketINV}
      TABLE: ${self:custom.${self:provider.stage}.ordersTableINV}
      CLOSE_TABLE: ${self:custom.${self:provider.stage}.closedOrdersTableINV}
      ENV: ${self:custom.${self:provider.stage}.env}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: opened-orders-data-processor-${self:provider.stage}
  open-trades-reconciliation:
    handler: order_reconciliation.run_reconciliation
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TRADING_DATA_BUCKET: "icarus-trading-data"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: open-trades-reconciliation-${self:provider.stage}
    #####
  dynamo-backup-15-min:
    handler: alt-storage.dynamo_backup.lambda_handler
    events:
      - eventBridge:
          name: dynamo-15min-schedule-${self:provider.stage}
          description: trigger to backup the dynamo schedule every 15 minutes
          schedule: rate(15 minutes)
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TABLE_LIST: ${self:custom.${self:provider.stage}.tableList15min}
      FREQUENCY: "15MIN"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: dynamo-backup-15-min-${self:provider.stage}
  dynamo-backup-daily:
    handler: alt-storage.dynamo_backup.lambda_handler
    events:
      - eventBridge:
          name: dynamo-daily-schedule-${self:provider.stage}
          description: trigger to backup the dynamo schedule daily
          schedule: rate(24 hours)
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TABLE_LIST: ${self:custom.${self:provider.stage}.tableListdaily}
      FREQUENCY: "DAILY"
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: dynamo-backup-daily-${self:provider.stage}
  order-controls:
      handler: order_control.run_order_control
      environment:
        ENV: ${self:custom.${self:provider.stage}.env}
        TRADING_DATA_BUCKET: "icarus-trading-data"
      layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
      name: order-controls-${self:provider.stage}
  trading-activity-monitor:
      handler: trading_activity.lambda_handler
      events:
        - eventBridge:
            name: trading-activity-monitor-schedule-${self:provider.stage}
            description: trigger to log all of the closed orders in s3 each month
            schedule: 'cron(30 23 * * ? *)'
      layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
      name: trading-activity-monitor-${self:provider.stage}
  closed-order-monthly-log:
    handler: alt-storage.closed_orders_log.lambda_handler
    events:
      - eventBridge:
          name: closed-orders-monthly-schedule-${self:provider.stage}
          description: trigger to log all of the closed orders in s3 each month
          schedule: rate(1 day)
    environment:
      ENV: ${self:custom.${self:provider.stage}.env}
      TABLE_LIST: ${self:custom.${self:provider.stage}.closedTablelist}
    layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:16
      - arn:aws:lambda:us-east-1:456201388658:layer:pytz:1
    role: arn:aws:iam::456201388658:role/batch-scout-lambdaRole
    name: closed-orders-log-${self:provider.stage}
        
  
 
stepFunctions:
  stateMachines:
    icarus-new-trades:
      name: icarus-new-trades-${self:provider.stage}
      role: arn:aws:iam::456201388658:role/service-role/StepFunctions-Gainers-Production-Modeling-role-72889a0b
      alarms:
        topics:
          alarm: arn:aws:sns:us-east-1:456201388658:yqalerts-production-modeling
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
        treatMissingData: missing
      definition:
        Comment: "This state machine constructs and executes trades based on results of the modeling engine"
        StartAt: ParallelProcessorINV
        States:
          ParallelProcessorINV:
            Type: Parallel
            Branches:
              - StartAt: BuildTradeCDVOLBFP1D
                States:
                  BuildTradeCDVOLBFP1D:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [icarus-trade-builder-CDVOLBFP1D, Arn]
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 3
                      BackoffRate: 2
                    End: True
              - StartAt: BuildTradeCDVOLBFC1D
                States:
                  BuildTradeCDVOLBFC1D:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [icarus-trade-builder-CDVOLBFC1D, Arn]
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 3
                      BackoffRate: 2
                    End: True
              - StartAt: BuildTradeCDVOLBFP
                States:
                  BuildTradeCDVOLBFP:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [icarus-trade-builder-CDVOLBFP, Arn]
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 3
                      BackoffRate: 2
                    End: True
              - StartAt: BuildTradeCDVOLBFC
                States:
                  BuildTradeCDVOLBFC:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [icarus-trade-builder-CDVOLBFC, Arn]
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 3
                      BackoffRate: 2
                    End: True
            Next: PortfolioManagerINV
          PortfolioManagerINV:
            Type: Task
            Resource: 
              Fn::GetAtt: [new-trades-portfolio-manager-paper, Arn]
            Parameters:
              Payload.$: $
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 5
              MaxAttempts: 3
              BackoffRate: 2
            Next: OpenedOrdersProcessor
          OpenedOrdersProcessor:
            Type: Task
            Resource: 
              Fn::GetAtt: [opened-orders-data-processor, Arn]
            Parameters:
              Payload.$: "$.lambda_signifier"
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 5
              MaxAttempts: 3
              BackoffRate: 2
            Next: End
          End:
            Type: Succeed
    icarus-open-trades:
      name: icarus-open-trades-${self:provider.stage}
      role: arn:aws:iam::456201388658:role/service-role/StepFunctions-Gainers-Production-Modeling-role-72889a0b
      alarms:
        topics:
          alarm: arn:aws:sns:us-east-1:456201388658:yqalerts-production-modeling
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
        treatMissingData: missing
      definition:
        Comment: "This state machine constructs and executes trades based on results of the modeling engine"
        StartAt: PortfolioManager
        States:
          PortfolioManager:
            Type: Parallel
            Branches:
              - StartAt: TradeManagerCDBFC
                States:
                  TradeManagerCDBFC:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [open-trades-portfolio-manage-paperCDBFC, Arn]
                    Parameters:
                      Payload.$: $
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 1
                      BackoffRate: 2
                    # Catch:
                    # - ErrorEquals: ["States.ALL"]
                    End: True
              - StartAt: TradeManagerCDBFP
                States:
                  TradeManagerCDBFP:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [open-trades-portfolio-manage-paperCDBFP, Arn]
                    Parameters:
                      Payload.$: $
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 1
                      BackoffRate: 2
                    # Catch:
                    # - ErrorEquals: ["States.ALL"]
                    End: True
              - StartAt: TradeManagerCDBFC1D
                States:
                  TradeManagerCDBFC1D:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [open-trades-portfolio-manage-paperCDBFC1D, Arn]
                    Parameters:
                      Payload.$: $
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 1
                      BackoffRate: 2
                    # Catch:
                    # - ErrorEquals: ["States.ALL"]
                    End: True
              - StartAt: TradeManagerCDBFP1D
                States:
                  TradeManagerCDBFP1D:
                    Type: Task
                    Resource: 
                      Fn::GetAtt: [open-trades-portfolio-manage-paperCDBFP1D, Arn]
                    Parameters:
                      Payload.$: $
                    Retry:
                    - ErrorEquals:
                      - Lambda.ServiceException
                      - Lambda.AWSLambdaException
                      - Lambda.SdkClientException
                      IntervalSeconds: 5
                      MaxAttempts: 1
                      BackoffRate: 2
                    # Catch:
                    # - ErrorEquals: ["States.ALL"]
                    End: True
            Next: ClosedOrdersProcessor
          ClosedOrdersProcessor:
            Type: Task
            Resource: 
              Fn::GetAtt: [closed-orders-data-processor, Arn]
            Parameters:
              Payload.$: "$"
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 5
              MaxAttempts: 3
              BackoffRate: 2
            Next: End
          End:
            Type: Succeed